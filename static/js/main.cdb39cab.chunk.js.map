{"version":3,"sources":["components/SearchForm.js","utils/API.js","components/Jumbotron.js","components/EmployeeList.js","components/EmployeeContainer.js","App.js","index.js"],"names":["SearchForm","props","className","onChange","handleInputChange","value","name","type","placeholder","id","axios","get","Jumbotron","pros","heading","subHeading","EmployeeList","scope","onClick","sortFunction","icon","results","map","result","alt","first","src","picture","thumbnail","last","phone","email","Intl","DateTimeFormat","year","month","format","Date","dob","date","EmployeeContainer","state","search","sort","column","direction","event","target","setState","sortDirection","setIcon","sortResult","a","b","nameA","toLowerCase","nameB","emailA","emailB","parseInt","replace","reverse","API","then","res","data","catch","err","console","log","this","lowercasedSearch","searchResult","filter","concat","toLocaleLowerCase","includes","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cdb39cab.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction SearchForm(props) {\r\n    return (\r\n        <form>\r\n            <div className=\"form-group\">\r\n                <input\r\n                    onChange={props.handleInputChange}\r\n                    value={props.value}\r\n                    name=\"search\"\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    placeholder=\"Search by First or Last Name\"\r\n                    id=\"search\"\r\n                />\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default SearchForm;","import axios from \"axios\";\r\n\r\nconst BASEURL = \"https://randomuser.me/api/?results=100&nat=US&exc=login,gender,location,registered,nat\";\r\n\r\nexport default {\r\n    search: function () {\r\n        return axios.get(BASEURL);\r\n    }\r\n}","import React from \"react\";\r\n\r\nfunction Jumbotron(pros) {\r\n    return(\r\n    <div>\r\n        <div className=\"jumbotron jumbotron-fluid\">\r\n        <div className=\"container\">\r\n          <h1 className=\"display-4\">{pros.heading}</h1>\r\n          <p className=\"lead\">{pros.subHeading}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Jumbotron;","import React from \"react\";\r\n\r\nfunction EmployeeList(props) {\r\n    return (\r\n        <table className=\"table table-striped\">\r\n            <thead className=\"thead-dark\">\r\n                <tr>\r\n                    <th scope=\"col\">Image</th>\r\n                    <th scope=\"col\" onClick={() => props.sortFunction(\"Name\")}>Name <i className={props.icon}></i></th>\r\n                    <th scope=\"col\" onClick={() => props.sortFunction(\"Phone\")}>Phone <i className={props.icon}></i></th>\r\n                    <th scope=\"col\" onClick={() => props.sortFunction(\"Email\")}>Email <i className={props.icon}></i></th>\r\n                    <th scope=\"col\" onClick={() => props.sortFunction(\"DOB\")}>DOB <i className={props.icon}></i></th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {props.results.map(result => (\r\n                    <tr key={result.name.first + result.id.value}>\r\n                        <th scope=\"row\"><img alt={result.name.first} src={result.picture.thumbnail}></img></th>\r\n                        <td>{result.name.first + \" \" + result.name.last}</td>\r\n                        <td>{result.phone}</td>\r\n                        <td>{result.email}</td>\r\n                        <td>{new Intl.DateTimeFormat('en-US', { year: \"numeric\", month: \"numeric\", month: \"2-digit\", day: \"2-digit\" }).format(new Date(result.dob.date))}</td>\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default EmployeeList;","import React, { Component } from \"react\";\r\nimport SearchForm from \"./SearchForm\";\r\nimport API from \"../utils/API\";\r\nimport Jumbotron from \"./Jumbotron\";\r\nimport EmployeeList from \"./EmployeeList\";\r\n\r\nclass EmployeeContainer extends Component {\r\n\r\n    state = {\r\n        search: \"\",\r\n        results: [],\r\n        sort: {\r\n            column: null,\r\n            direction: \"desc\",\r\n            icon: \"fas fa-sort-up\"\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        API.search()\r\n            .then(res => this.setState({ results: res.data.results }))\r\n            .catch(err => console.log(err));\r\n        this.setState({icon: \"fas fa-sort-up\"}); \r\n    }\r\n\r\n    handleInputChange = event => {\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    sortFunction = (column) => {\r\n\r\n        let sortDirection = this.state.sort.direction;\r\n        sortDirection = sortDirection === \"desc\" ? \"asc\" : \"desc\";\r\n        let setIcon = sortDirection === \"desc\" ? \"fas fa-sort-up\" : \"fas fa-sort-down\";\r\n        this.setState({icon: setIcon});\r\n        const sortResult = this.state.results.sort((a,b) => {\r\n            switch (column) {\r\n                case \"Name\":\r\n                    const nameA = a.name.first.toLowerCase();\r\n                    const nameB = b.name.first.toLowerCase();\r\n                    // nameA is less than nameB by some ordering criterion\r\n                    if (nameA > nameB) return -1;\r\n                    // nameB is less than nameA by some ordering criterion\r\n                    if (nameB > nameA) return 1;\r\n                    // nameA must be equal to nameB\r\n                return 0;\r\n                case \"Email\":\r\n                    const emailA = a.email.toLowerCase();\r\n                    const emailB = b.email.toLowerCase();\r\n                    // nameA is less than nameB by some ordering criterion\r\n                    if (emailA > emailB) return -1;\r\n                    // nameB is less than nameA by some ordering criterion\r\n                    if (emailB > emailA) return 1;\r\n                    // nameA must be equal to nameB\r\n                return 0;\r\n                case \"Phone\":\r\n                    const numA = parseInt(a.phone.replace(/[^0-9]/g, ''), 10);\r\n                    const numB = parseInt(b.phone.replace(/[^0-9]/g, ''), 10);\r\n                    //To compare numbers instead of strings, the compare function can subtract b from a. The following function will sort the array in ascending order.\r\n                return numA - numB;\r\n                case \"DOB\":\r\n                    const dobA = parseInt(a.dob.date.replace(/[^0-9]/g, ''), 10);\r\n                    const dobB = parseInt(b.dob.date.replace(/[^0-9]/g, ''), 10);\r\n                    //To compare numbers instead of strings, the compare function can subtract b from a. The following function will sort the array in ascending order.\r\n                return dobA - dobB;\r\n                default:\r\n                    break;\r\n            }\r\n            \r\n        });\r\n       \r\n        if (sortDirection === \"desc\"){\r\n            sortResult.reverse();\r\n        }\r\n        this.setState({\r\n            results: sortResult,\r\n            sort: {\r\n                column: column,\r\n                direction: sortDirection,\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const lowercasedSearch = this.state.search.toLowerCase();\r\n        const searchResult = this.state.results.filter(name => name.name.first.concat(name.name.last).toLocaleLowerCase().includes(lowercasedSearch));\r\n        return (\r\n            <div>\r\n                <Jumbotron\r\n                    heading=\"Employee Directory\"\r\n                    subHeading=\"Click on the arrows to sort each column by ascending or descending or use the search box to narrow your results.\"\r\n                />\r\n                <SearchForm\r\n                    value={this.state.search}\r\n                    handleInputChange={this.handleInputChange}\r\n                />\r\n                <EmployeeList\r\n                    sortFunction={this.sortFunction}\r\n                    icon={this.state.icon}\r\n                    results={searchResult}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EmployeeContainer;","import React from \"react\";\nimport EmployeeContainer from \"./components/EmployeeContainer\"\n\nfunction App() {\n  return (\n    <EmployeeContainer />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}